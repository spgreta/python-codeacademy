#check if a number is even
def is_even(x):
  if x % 2 == 0:
    return True
  else:
    return False

#check if a number is an integer
def is_int(x):
  if x - round(x) != 0:
    return False
  else:
    return True

#sum digits of a number
def digit_sum(n):
  n = str(n)
  s = []
  for x in n:
    x = int(x)
    s.append(x)
  return sum(s)
#factorial
def factorial(x):
  total = 1
  while x > 0:
    total *= x
    x -= 1
  return total

#check if a number is prime
def is_prime(x):
  if x < 2:
    return False
  elif x > 2:
    while x > 2:
      x = str(x)
      for n in (x):
        if int(x) % int(n) != 0:
          return False
  else:
    return True

#return a string in reverse
def reverse(text):
  x = 1
  s = ""
  while x < len(text) + 1:
    s += text[len(text)-x]
    x += 1
  return s

#remove vowels from a string
def anti_vowel(text):
  for x in text:
    if x in "aeiouAEIOU":
      text = text.replace(x, "")
  return text

#scrabble score calculator
score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}      
def scrabble_score(word):
  scrab_score = 0
  for x in word:
    x = x.lower()
    scrab_score += score[x]
  return scrab_score

#censor words
def censor(text, word):
  broken = text.split()
  final_word = ""
  star = "*" * len(word)
  mark = 0
  for x in broken:
    if x == word:
      broken[mark] = star
    mark += 1
  final_word = " ".join(broken)
  return final_word

#count items in a list
def count(sequence, item):
  count = 0
  for x in sequence:
    if x == item:
      count += 1
  return count

#remove odd numbers from a list
def purify(numbers):
  new_list = []
  for x in numbers:
    if int(x) % 2 == 0:
      new_list.append(x)
  return new_list

#multiply all the numbers in a list
def product(numbers):
  answer = 1
  for x in numbers:
    answer *= x
  return answer

#remove duplicate items from a list
def remove_duplicates(items):
  new_items = []
  count = 0
  for x in items:
    if x not in new_items:
      new_items.append(x)
  return new_items

#find the median of a list
def median(numbers):
  numbers = sorted(numbers)
  if len(numbers) % 2 != 0:
    index = len(numbers)/2
    return numbers[int(index)]
  else:
    index1 = len(numbers)/2 - 1
    index2 = len(numbers)/2
    summ = numbers[index1] + numbers[index2]
    aver = summ/2.
    return aver

#take a string and return the string with alternating capital and lowercase letters
def myfunc(astring):
    newlist = []
    for x in range(0, len(astring)):
        if x % 2 == 0:
            newlist.append(astring[x].upper())
        elif x % 2 != 0:
            newlist.append(astring[x].lower())
    return ''.join(newlist)

#Takes two number inputs and if both numbers are even, returns the lesser of the two. If one number is odd, returns the greater of the two numbers.
def lesser_of_two_evens(a,b):
    if a % 2 == 0 and b % 2 == 0:
        return min(a,b)
    else:
        return max(a,b)

#Takes a two-word string and returns True if both words begin with same letter
def animal_crackers(text):
    newlist = text.split()
    if newlist[0][0] == newlist[1][0]:
        return True
    else:
        return False

#Given two integers, return True if the sum of the integers is 20 or if one of the integers is 20. If not, return False
def makes_twenty(a,b):
    if a+b == 20:
        return True
    elif a == 20 or b == 20:
        return True
    else:
        return False

#Ffunction that capitalizes the first and fourth letters of a name
def capfirstandfourth(mystring):
    newstring = mystring[0].capitalize() + mystring[1:3] + mystring[3].capitalize() + mystring[4:]
    return newstring

#Given a sentence, return a sentence with the words reversed
def masteryoda(mystring):
    newlist = mystring.split()
    newlist = newlist[::-1]
    return " ".join(newlist)

#Given an integer n, return True if n is within 10 of either 100 or 200
def almost_there(number):
    if abs(number - 100) < 11:
        return True
    elif abs(number-200) < 11:
        return True
    else:
        return False

#Given a list of ints, return True if the array contains a 3 next to a 3 somewhere
def has_33(number):
    for x in range(0,len(number)-1):
        if number[x:x+2] == [3,3]:
            return True
        
    return False

#Given a string, return a string where for every character in the original there are three characters
def paper_doll(mystring):
    newstring = []
    for x in range(len(mystring)):
        newstring.append(mystring[x]*3)
    return "".join(newstring)

#Given three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST'
def blackjack(a,b,c):
    if (a+b+c) <= 21:
        return a+b+c
    elif a == 11 or b == 11 or c == 11 and ((a+b+c)-10) <= 21:
        return ((a+b+c) - 10)
    else:
        return "Bust!"

#Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 9 (every 6 will be followed by at least one 9). Return 0 for no numbers.
def summer_69(numbers):
    for x in range(len(numbers)):
        if numbers[x] == 6:
            index1 = x
        elif numbers[x] == 9:
            index2 = x+1
    if 6 in numbers and 9 in numbers:
        del numbers[index1:index2]
    answer = 0
    for x in numbers:
        answer += x
    return answer

#Write a function that takes in a list of integers and returns True if it contains 007 in order
def spy_game(numbers):

    bond = [0,0,7,'x']
    
    for number in numbers:
        if number == bond[0]:
            bond.pop(0)
    
    return len(bond) == 1

#


#
